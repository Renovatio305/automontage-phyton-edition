#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Auto Montage Builder Pro
"""

import sys
import time
import logging
from typing import List, Optional
from pathlib import Path

from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *

from models import Channel, DataManager
from engine import MontageEngine
from gui_base import StyleManager, SignalEmitter, AboutDialog, ProgressDialog
from gui_tabs import (
    GenerationTab, ChannelsTab, EffectsTab, 
    CapCutTab, OverlaysTab, SettingsTab
)
from utils import setup_logging

logger = logging.getLogger(__name__)

# ==================== –ü–û–¢–û–ö –ì–ï–ù–ï–†–ê–¶–ò–ò ====================

class GenerationThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω—Ç–∞–∂–∞"""
    
    def __init__(self, engine: MontageEngine, channels: List[Channel], 
                 test_mode: bool = False, process_audio: bool = True,
                 parent=None):
        super().__init__(parent)
        self.engine = engine
        self.channels = channels
        self.test_mode = test_mode
        self.process_audio = process_audio
        self.signals = SignalEmitter()
        self.is_cancelled = False
        
    def run(self):
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ
            if self.process_audio and not self.test_mode:
                self.signals.progress_updated.emit(0, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...")
                success = self.engine.prepare_audio_variants(self.channels)
                if not success or self.is_cancelled:
                    self.signals.generation_finished.emit(
                        False, "–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—É–¥–∏–æ"
                    )
                    return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            total_channels = len(self.channels)
            for i, channel in enumerate(self.channels):
                if self.is_cancelled:
                    break
                
                channel_progress = (i / total_channels) * 100
                self.signals.progress_updated.emit(
                    channel_progress,
                    f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ {i+1}/{total_channels}: {channel.name}"
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞
                def channel_progress_callback(progress, message):
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–Ω–∞–ª–∞
                    total_progress = channel_progress + (progress / total_channels)
                    self.signals.progress_updated.emit(total_progress, message)
                
                self.engine.set_progress_callback(channel_progress_callback)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–Ω—Ç–∞–∂
                output_path = self.engine.generate_channel_montage(channel, self.test_mode)
                
                if not output_path:
                    self.signals.generation_finished.emit(
                        False, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ {channel.name}"
                    )
                    return
                
                self.signals.log_message.emit(
                    f"–ö–∞–Ω–∞–ª '{channel.name}' –≥–æ—Ç–æ–≤: {output_path}", "info"
                )
            
            if self.is_cancelled:
                self.signals.generation_finished.emit(False, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                self.signals.generation_finished.emit(
                    True, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                )
                
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {error_details}")
            self.signals.error_occurred.emit(str(e))
            self.signals.generation_finished.emit(False, f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def cancel(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        self.is_cancelled = True

# ==================== –ì–õ–ê–í–ù–û–ï –û–ö–ù–û ====================

class AutoMontageMainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üé¨ Auto Montage Builder Pro - Enhanced Edition")
        self.setMinimumSize(1400, 900)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.data_manager = DataManager()
        self.channels = []
        self.settings = {}
        self.project_folder = None
        self.engine = None
        self.generation_thread = None
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        self.setStyleSheet(StyleManager.get_dark_theme())
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.load_data()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_ui()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.show_welcome_message()
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        main_layout.setSpacing(0)
        main_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header(main_layout)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.generation_tab = GenerationTab()
        self.generation_tab.generate_requested.connect(self.start_generation)
        self.tabs.addTab(self.generation_tab, "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
        
        self.channels_tab = ChannelsTab()
        self.channels_tab.channels_changed.connect(self.on_channels_changed)
        self.tabs.addTab(self.channels_tab, "üì∫ –ö–∞–Ω–∞–ª—ã")
        
        self.effects_tab = EffectsTab()
        self.tabs.addTab(self.effects_tab, "üé® –≠—Ñ—Ñ–µ–∫—Ç—ã")
        
        self.capcut_tab = CapCutTab()
        self.tabs.addTab(self.capcut_tab, "‚ú® CapCut FX")
        
        self.overlays_tab = OverlaysTab()
        self.tabs.addTab(self.overlays_tab, "üé≠ –û–≤–µ—Ä–ª–µ–∏")
        
        self.settings_tab = SettingsTab()
        self.settings_tab.settings_changed.connect(self.save_settings)
        self.tabs.addTab(self.settings_tab, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        main_layout.addWidget(self.tabs)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()
        
        central_widget.setLayout(main_layout)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∞–º
        self.update_tabs_data()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.connect_signals()
    
    def create_header(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        header = QWidget()
        header.setObjectName("header")
        header.setStyleSheet("""
            #header {
                background-color: #0d0d0d;
                border-bottom: 2px solid #00d4aa;
            }
        """)
        
        header_layout = QHBoxLayout()
        header_layout.setContentsMargins(20, 10, 20, 10)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo_label = QLabel("üé¨")
        logo_label.setStyleSheet("font-size: 32px;")
        header_layout.addWidget(logo_label)
        
        title_label = QLabel("AUTO MONTAGE BUILDER PRO")
        title_label.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #00d4aa;
            letter-spacing: 2px;
        """)
        header_layout.addWidget(title_label)
        
        version_label = QLabel("v5.0.0")
        version_label.setStyleSheet("color: #666; font-size: 14px;")
        header_layout.addWidget(version_label)
        
        header_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        help_btn = QPushButton("‚ùì")
        help_btn.setToolTip("–°–ø—Ä–∞–≤–∫–∞")
        help_btn.setFixedSize(32, 32)
        help_btn.clicked.connect(self.show_help)
        header_layout.addWidget(help_btn)
        
        about_btn = QPushButton("‚ÑπÔ∏è")
        about_btn.setToolTip("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_btn.setFixedSize(32, 32)
        about_btn.clicked.connect(self.show_about)
        header_layout.addWidget(about_btn)
        
        header.setLayout(header_layout)
        layout.addWidget(header)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.status_message = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar.addWidget(self.status_message)
        
        self.status_bar.addPermanentWidget(QLabel(" | "))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        self.project_info = QLabel("–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.status_bar.addPermanentWidget(self.project_info)
        
        self.status_bar.addPermanentWidget(QLabel(" | "))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
        self.resource_info = QLabel("")
        self.status_bar.addPermanentWidget(self.resource_info)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö
        self.update_resource_info()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        self.resource_timer = QTimer()
        self.resource_timer.timeout.connect(self.update_resource_info)
        self.resource_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    def connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        # –ü—Ä–æ–µ–∫—Ç
        project_panel = self.generation_tab.get_project_info_panel()
        project_panel.folder_changed.connect(self.on_project_folder_changed)
        project_panel.scan_requested.connect(self.scan_project)
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        screen = QApplication.primaryScreen().geometry()
        size = self.geometry()
        self.move(
            (screen.width() - size.width()) // 2,
            (screen.height() - size.height()) // 2
        )
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
        self.channels = self.data_manager.load_channels()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.data_manager.load_settings()
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã
        self.data_manager.save_channels(self.channels)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.data_manager.save_settings(self.settings)
    
    def update_tabs_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö"""
        self.generation_tab.set_channels(self.channels)
        self.channels_tab.set_channels(self.channels)
        self.effects_tab.set_channels(self.channels)
        self.capcut_tab.set_channels(self.channels)
        self.overlays_tab.set_channels(self.channels)
        self.settings_tab.load_settings(self.settings)
    
    def on_channels_changed(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –≤–∫–ª–∞–¥–∫–∏
        self.channels = self.channels_tab.channels
        self.save_data()
        self.update_tabs_data()
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings = self.settings_tab.get_settings()
        self.save_data()
    
    def on_project_folder_changed(self, folder: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        self.project_folder = folder
        self.project_info.setText(f"–ü—Ä–æ–µ–∫—Ç: {Path(folder).name}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        self.engine = MontageEngine(folder)
    
    def scan_project(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
        if not self.engine:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return
        
        project_panel = self.generation_tab.get_project_info_panel()
        include_videos = project_panel.get_include_videos()
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º
        result = self.engine.scan_project_folder(include_videos)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        project_panel.update_info(result)
        
        if result['pairs'] > 0:
            self.status_message.setText(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Ñ–∞–π–ª–æ–≤: {result['pairs']}")
        else:
            self.status_message.setText("–ü–∞—Ä—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def start_generation(self, channels: List[Channel], test_mode: bool):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–æ–Ω—Ç–∞–∂–∞"""
        if not self.engine:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return
        
        if not self.engine.media_pairs:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        process_audio = self.generation_tab.get_process_audio_setting()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.generation_thread = GenerationThread(
            self.engine, channels, test_mode, process_audio
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self.generation_thread.signals.progress_updated.connect(
            self.generation_tab.update_progress
        )
        self.generation_thread.signals.log_message.connect(
            self.generation_tab.add_log_message
        )
        self.generation_thread.signals.generation_finished.connect(
            self.on_generation_finished
        )
        self.generation_thread.signals.error_occurred.connect(
            self.on_generation_error
        )
        
        # –û—Ç–∫–ª—é—á–∞–µ–º cancel
        cancel_btn = self.generation_tab.cancel_btn
        cancel_btn.clicked.connect(self.cancel_generation)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        self.generation_tab.start_generation()
        self.generation_thread.start()
        
        self.status_message.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–Ω—Ç–∞–∂–∞...")
    
    def cancel_generation(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        if self.generation_thread and self.generation_thread.isRunning():
            self.generation_thread.cancel()
            self.generation_tab.add_log_message("–û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...", "warning")
    
    def on_generation_finished(self, success: bool, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.generation_tab.finish_generation()
        
        if success:
            self.generation_tab.add_log_message(message, "info")
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", message)
            self.status_message.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å —Ä–µ–Ω–¥–µ—Ä–∞–º–∏
            if self.engine:
                renders_folder = self.engine.renders_folder
                QDesktopServices.openUrl(QUrl.fromLocalFile(str(renders_folder)))
        else:
            self.generation_tab.add_log_message(message, "error")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
            self.status_message.setText("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    def on_generation_error(self, error: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.generation_tab.add_log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error}", "error")
    
    def update_resource_info(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–∞—Ö"""
        from utils import SystemUtils, Converters
        
        # CPU
        cpu_count = SystemUtils.get_cpu_count()
        
        # –ü–∞–º—è—Ç—å
        mem_info = SystemUtils.get_memory_info()
        if mem_info['total'] > 0:
            mem_used = Converters.bytes_to_human(mem_info['used'])
            mem_total = Converters.bytes_to_human(mem_info['total'])
            mem_percent = mem_info['percent']
            
            self.resource_info.setText(
                f"CPU: {cpu_count} | "
                f"RAM: {mem_used}/{mem_total} ({mem_percent:.0f}%)"
            )
    
    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.settings.get('show_welcome', True):
            welcome_text = """
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Auto Montage Builder Pro!</h2>
            <p>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</p>
            <ol>
            <li>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏</li>
            <li>–°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
            <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</li>
            <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –º–æ–Ω—Ç–∞–∂"</li>
            </ol>
            <p><b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫!</p>
            """
            
            msg = QMessageBox(self)
            msg.setWindowTitle("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            msg.setTextFormat(Qt.RichText)
            msg.setText(welcome_text)
            msg.setIcon(QMessageBox.Information)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å
            cb = QCheckBox("–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
            msg.setCheckBox(cb)
            
            msg.exec()
            
            if cb.isChecked():
                self.settings['show_welcome'] = False
                self.save_settings()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
        <h2>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Auto Montage Builder Pro</h2>
        
        <h3>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤:</h3>
        <p>–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:<br>
        <code>0001_image.jpg + 0001_audio.mp3</code><br>
        <code>0002_video.mp4 + 0002_audio.mp3</code></p>
        
        <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</h3>
        <ul>
        <li><b>Ctrl+N</b> - –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª</li>
        <li><b>Ctrl+S</b> - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</li>
        <li><b>Ctrl+G</b> - –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é</li>
        <li><b>F1</b> - –°–ø—Ä–∞–≤–∫–∞</li>
        </ul>
        
        <h3>–°–æ–≤–µ—Ç—ã:</h3>
        <ul>
        <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
        <li>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å Ken Burns —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏</li>
        <li>CapCut —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–æ–±–∞–≤—è—Ç –¥–∏–Ω–∞–º–∏–∫–∏</li>
        <li>–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</li>
        </ul>
        """
        
        QMessageBox.information(self, "–°–ø—Ä–∞–≤–∫–∞", help_text)
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""""
        dialog = AboutDialog(self)
        dialog.exec()
    
    def closeEvent(self, event: QCloseEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if self.generation_thread and self.generation_thread.isRunning():
            reply = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.No
            )
            
            if reply == QMessageBox.No:
                event.ignore()
                return
            
            # –û—Ç–º–µ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            self.generation_thread.cancel()
            self.generation_thread.wait()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        self.settings['window_geometry'] = self.saveGeometry().toBase64().data().decode()
        self.settings['window_state'] = self.saveState().toBase64().data().decode()
        self.save_settings()
        
        event.accept()
    
    def showEvent(self, event: QShowEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –æ–∫–Ω–∞"""
        super().showEvent(event)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞
        if 'window_geometry' in self.settings:
            try:
                geometry = QByteArray.fromBase64(
                    self.settings['window_geometry'].encode()
                )
                self.restoreGeometry(geometry)
            except:
                pass
        
        if 'window_state' in self.settings:
            try:
                state = QByteArray.fromBase64(
                    self.settings['window_state'].encode()
                )
                self.restoreState(state)
            except:
                pass

# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setApplicationName("Auto Montage Builder Pro")
    app.setApplicationVersion("5.0.0")
    app.setOrganizationName("AutoMontage Team")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    icon_path = Path(__file__).parent / "icon.png"
    if icon_path.exists():
        app.setWindowIcon(QIcon(str(icon_path)))
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = AutoMontageMainWindow()
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec())

if __name__ == "__main__":
    main()