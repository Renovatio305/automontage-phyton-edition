#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è Auto Montage Builder Pro
"""

import time
import logging
from typing import List, Dict, Optional, Any
from pathlib import Path

from PySide6.QtWidgets import *
from PySide6.QtCore import *
from PySide6.QtGui import *

from models import (
    Channel, EffectSettings, ExportSettings, OverlaySettings,
    KenBurnsEffect, CapCutEffect, TransitionType
)
from gui_base import (
    BaseWidget, EffectCheckBox, SliderWithLabel, 
    FilePathSelector, CollapsibleGroupBox, LogWidget
)
from gui_widgets import (
    ProjectInfoPanel, ChannelSelectionPanel, ChannelDialog
)

logger = logging.getLogger(__name__)

# ==================== –í–ö–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò ====================

class GenerationTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–Ω—Ç–∞–∂–∞"""
    
    generate_requested = Signal(list, bool)  # channels, test_mode
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.channels: List[Channel] = []
        self.selected_channel_ids = set()
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()
        
        # –ü–∞–Ω–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
        self.project_panel = ProjectInfoPanel()
        scroll_layout.addWidget(self.project_panel)
        
        # –ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
        self.channel_selection = ChannelSelectionPanel()
        self.channel_selection.selection_changed.connect(self._on_selection_changed)
        scroll_layout.addWidget(self.channel_selection)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_group = CollapsibleGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        generation_layout = QVBoxLayout()
        
        self.process_audio_check = QCheckBox(
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"
        )
        self.process_audio_check.setChecked(True)
        generation_layout.addWidget(self.process_audio_check)
        
        quality_layout = QHBoxLayout()
        quality_layout.addWidget(QLabel("–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"))
        self.quality_combo = QComboBox()
        self.quality_combo.addItems(["–ë—ã—Å—Ç—Ä–æ", "–ë–∞–ª–∞–Ω—Å", "–ö–∞—á–µ—Å—Ç–≤–æ", "–ú–∞–∫—Å–∏–º—É–º"])
        self.quality_combo.setCurrentIndex(1)
        quality_layout.addWidget(self.quality_combo)
        quality_layout.addStretch()
        generation_layout.addLayout(quality_layout)
        
        self.parallel_check = QCheckBox("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
        self.parallel_check.setToolTip(
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ä–µ—Å—É—Ä—Å–æ–≤)"
        )
        generation_layout.addWidget(self.parallel_check)
        
        generation_group.setLayout(generation_layout)
        scroll_layout.addWidget(generation_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π

        actions_layout = QHBoxLayout()
        actions_layout.setSpacing(10)
        
        self.test_btn = QPushButton("üß™ –¢–µ—Å—Ç (1 –ø–∞—Ä–∞)")
        self.test_btn.setToolTip("–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤")
        self.test_btn.clicked.connect(self._on_test_clicked)
        actions_layout.addWidget(self.test_btn)
        
        actions_layout.addStretch()
        
        self.generate_btn = QPushButton("üé¨ –°–û–ó–î–ê–¢–¨ –ú–û–ù–¢–ê–ñ")
        self.generate_btn.setObjectName("primaryButton")
        self.generate_btn.clicked.connect(self._on_generate_clicked)
        self.generate_btn.setEnabled(False)
        actions_layout.addWidget(self.generate_btn)
        
        scroll_layout.addLayout(actions_layout)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_group = QGroupBox("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
        progress_layout = QVBoxLayout()
        
        self.progress_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        progress_layout.addWidget(self.progress_label)
        
        self.progress_bar = QProgressBar()
        progress_layout.addWidget(self.progress_bar)
        
        self.eta_label = QLabel("")
        self.eta_label.setObjectName("infoLabel")
        progress_layout.addWidget(self.eta_label)
        
        self.cancel_btn = QPushButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
        self.cancel_btn.setObjectName("dangerButton")
        self.cancel_btn.setVisible(False)
        progress_layout.addWidget(self.cancel_btn)
        
        progress_group.setLayout(progress_layout)
        scroll_layout.addWidget(progress_group)
        
        # –õ–æ–≥
        log_group = CollapsibleGroupBox("üìú –ñ—É—Ä–Ω–∞–ª")
        log_layout = QVBoxLayout()
        
        self.log_widget = LogWidget()
        log_layout.addWidget(self.log_widget)
        
        log_buttons = QHBoxLayout()
        clear_log_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å")
        clear_log_btn.clicked.connect(self.log_widget.clear_log)
        log_buttons.addWidget(clear_log_btn)
        log_buttons.addStretch()
        log_layout.addLayout(log_buttons)
        
        log_group.setLayout(log_layout)
        scroll_layout.addWidget(log_group)
        
        scroll_layout.addStretch()
        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        
        layout.addWidget(scroll)
        self.setLayout(layout)
    
    def set_channels(self, channels: List[Channel]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels = channels
        self.channel_selection.set_channels(channels)
    
    def get_project_info_panel(self) -> ProjectInfoPanel:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        return self.project_panel
    
    def update_progress(self, value: float, text: str = ""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        self.progress_bar.setValue(int(value))
        if text:
            self.progress_label.setText(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º ETA –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if hasattr(self, '_start_time') and value > 0:
            elapsed = time.time() - self._start_time
            if value < 100:
                eta = elapsed * (100 - value) / value
                eta_text = f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {self._format_time(eta)}"
                self.eta_label.setText(eta_text)
            else:
                self.eta_label.setText("")
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{int(seconds)} —Å–µ–∫"
        elif seconds < 3600:
            return f"{int(seconds / 60)} –º–∏–Ω {int(seconds % 60)} —Å–µ–∫"
        else:
            hours = int(seconds / 3600)
            minutes = int((seconds % 3600) / 60)
            return f"{hours} —á {minutes} –º–∏–Ω"
    
    def start_generation(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        self._start_time = time.time()
        self.generate_btn.setEnabled(False)
        self.test_btn.setEnabled(False)
        self.cancel_btn.setVisible(True)
        self.progress_bar.setValue(0)
        self.progress_label.setText("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
    
    def finish_generation(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        self.generate_btn.setEnabled(True)
        self.test_btn.setEnabled(True)
        self.cancel_btn.setVisible(False)
        self.eta_label.setText("")
    
    def add_log_message(self, message: str, level: str = "info"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_widget.add_message(message, level)
    
    def _on_selection_changed(self, selected_ids: set):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        self.selected_channel_ids = selected_ids
        self.generate_btn.setEnabled(len(selected_ids) > 0)
    
    def _on_test_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        selected_channels = self.channel_selection.get_selected_channels()
        if not selected_channels:
            self.show_warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∞
        self.generate_requested.emit([selected_channels[0]], True)
    
    def _on_generate_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        selected_channels = self.channel_selection.get_selected_channels()
        if not selected_channels:
            self.show_warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_map = {
            "–ë—ã—Å—Ç—Ä–æ": "veryfast",
            "–ë–∞–ª–∞–Ω—Å": "medium",
            "–ö–∞—á–µ—Å—Ç–≤–æ": "slow",
            "–ú–∞–∫—Å–∏–º—É–º": "veryslow"
        }
        
        quality_preset = quality_map.get(self.quality_combo.currentText(), "medium")
        for channel in selected_channels:
            channel.export.quality.preset = quality_preset
        
        self.generate_requested.emit(selected_channels, False)
    
    def get_process_audio_setting(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
        return self.process_audio_check.isChecked()
    
    def get_parallel_processing(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return self.parallel_check.isChecked()

# ==================== –í–ö–õ–ê–î–ö–ê –ö–ê–ù–ê–õ–û–í ====================

class ChannelsTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    
    channels_changed = Signal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.channels: List[Channel] = []
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        create_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª")
        create_btn.clicked.connect(self._create_channel)
        buttons_layout.addWidget(create_btn)
        
        import_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç")
        import_btn.clicked.connect(self._import_channels)
        buttons_layout.addWidget(import_btn)
        
        export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self._export_channels)
        buttons_layout.addWidget(export_btn)
        
        template_btn = QPushButton("üìã –ò–∑ —à–∞–±–ª–æ–Ω–∞")
        template_btn.clicked.connect(self._create_from_template)
        buttons_layout.addWidget(template_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channels_group = QGroupBox("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
        channels_layout = QVBoxLayout()
        
        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        search_layout.addWidget(QLabel("üîç"))
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...")
        self.search_edit.textChanged.connect(self._filter_channels)
        search_layout.addWidget(self.search_edit)
        channels_layout.addLayout(search_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
        self.channels_table = QTableWidget()
        self.channels_table.setColumnCount(5)
        self.channels_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ", "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", "FPS", "–î–µ–π—Å—Ç–≤–∏—è"
        ])
        self.channels_table.horizontalHeader().setStretchLastSection(True)
        self.channels_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.channels_table.setAlternatingRowColors(True)
        channels_layout.addWidget(self.channels_table)
        
        channels_group.setLayout(channels_layout)
        layout.addWidget(channels_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = QLabel()
        self.stats_label.setObjectName("infoLabel")
        layout.addWidget(self.stats_label)
        
        self.setLayout(layout)
    
    def set_channels(self, channels: List[Channel]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels = channels
        self._update_table()
    
    def _update_table(self, filter_text: str = ""):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels_table.setRowCount(0)
        
        for channel in self.channels:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if filter_text and filter_text.lower() not in channel.name.lower():
                continue
            
            row = self.channels_table.rowCount()
            self.channels_table.insertRow(row)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name_item = QTableWidgetItem(channel.name)
            name_item.setData(Qt.UserRole, channel.id)
            self.channels_table.setItem(row, 0, name_item)
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            desc_item = QTableWidgetItem(channel.description)
            self.channels_table.setItem(row, 1, desc_item)
            
            # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            res_item = QTableWidgetItem(channel.export.resolution)
            res_item.setTextAlignment(Qt.AlignCenter)
            self.channels_table.setItem(row, 2, res_item)
            
            # FPS
            fps_item = QTableWidgetItem(f"{channel.export.fps} fps")
            fps_item.setTextAlignment(Qt.AlignCenter)
            self.channels_table.setItem(row, 3, fps_item)
            
            # –î–µ–π—Å—Ç–≤–∏—è
            actions_widget = self._create_actions_widget(channel)
            self.channels_table.setCellWidget(row, 4, actions_widget)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats()
    
    def _create_actions_widget(self, channel: Channel) -> QWidget:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        widget = QWidget()
        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(2)
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_btn = QPushButton("‚úèÔ∏è")
        edit_btn.setToolTip("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.setFixedSize(24, 24)
        edit_btn.clicked.connect(lambda: self._edit_channel(channel))
        layout.addWidget(edit_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        duplicate_btn = QPushButton("üìã")
        duplicate_btn.setToolTip("–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å")
        duplicate_btn.setFixedSize(24, 24)
        duplicate_btn.clicked.connect(lambda: self._duplicate_channel(channel))
        layout.addWidget(duplicate_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = QPushButton("üì§")
        export_btn.setToolTip("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        export_btn.setFixedSize(24, 24)
        export_btn.clicked.connect(lambda: self._export_channel(channel))
        layout.addWidget(export_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóëÔ∏è")
        delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å")
        delete_btn.setFixedSize(24, 24)
        delete_btn.clicked.connect(lambda: self._delete_channel(channel))
        layout.addWidget(delete_btn)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = len(self.channels)
        youtube = sum(1 for ch in self.channels if ch.template == "youtube")
        shorts = sum(1 for ch in self.channels if ch.template == "shorts")
        other = total - youtube - shorts
        
        stats_text = f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total} | YouTube: {youtube} | Shorts: {shorts} | –î—Ä—É–≥–∏–µ: {other}"
        self.stats_label.setText(stats_text)
    
    def _filter_channels(self, text: str):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–∫—Å—Ç—É"""
        self._update_table(text)
    
    def _create_channel(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
        dialog = ChannelDialog(parent=self)
        if dialog.exec():
            channel = dialog.get_channel()
            self.channels.append(channel)
            self._update_table()
            self.channels_changed.emit()
            self.show_info(f"–ö–∞–Ω–∞–ª '{channel.name}' —Å–æ–∑–¥–∞–Ω")
    
    def _edit_channel(self, channel: Channel):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª"""
        dialog = ChannelDialog(channel=channel, parent=self)
        if dialog.exec():
            updated_channel = dialog.get_channel()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ
            for i, ch in enumerate(self.channels):
                if ch.id == channel.id:
                    self.channels[i] = updated_channel
                    break
            self._update_table()
            self.channels_changed.emit()
            self.show_info(f"–ö–∞–Ω–∞–ª '{updated_channel.name}' –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def _duplicate_channel(self, channel: Channel):
        """–î—É–±–ª–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª"""
        from models import Channel
        from dataclasses import asdict
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
        channel_dict = asdict(channel)
        channel_dict['id'] = f"channel_{int(time.time())}"
        channel_dict['name'] = f"{channel.name} (–∫–æ–ø–∏—è)"
        
        new_channel = Channel.from_dict(channel_dict)
        self.channels.append(new_channel)
        self._update_table()
        self.channels_changed.emit()
        self.show_info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –∫–∞–Ω–∞–ª–∞ '{channel.name}'")
    
    def _delete_channel(self, channel: Channel):
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª"""
        if self.confirm_action(f"–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª '{channel.name}'?"):
            self.channels = [ch for ch in self.channels if ch.id != channel.id]
            self._update_table()
            self.channels_changed.emit()
            self.show_info(f"–ö–∞–Ω–∞–ª '{channel.name}' —É–¥–∞–ª–µ–Ω")
    
    def _export_channel(self, channel: Channel):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª"""
        from models import DataManager
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–∞",
            f"{channel.name}.json",
            "JSON files (*.json)"
        )
        
        if file_path:
            data_manager = DataManager()
            if data_manager.export_channels([channel], file_path):
                self.show_info(f"–ö–∞–Ω–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {file_path}")
            else:
                self.show_error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞")
    
    def _export_channels(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
        from models import DataManager
        
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤",
            f"channels_{time.strftime('%Y%m%d_%H%M%S')}.json",
            "JSON files (*.json)"
        )
        
        if file_path:
            data_manager = DataManager()
            if data_manager.export_channels(self.channels, file_path):
                self.show_info(f"–ö–∞–Ω–∞–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
            else:
                self.show_error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    def _import_channels(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã"""
        from models import DataManager
        
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–ò–º–ø–æ—Ä—Ç –∫–∞–Ω–∞–ª–æ–≤",
            "", "JSON files (*.json)"
        )
        
        if file_path:
            data_manager = DataManager()
            imported = data_manager.import_channels(file_path)
            
            if imported:
                self.channels.extend(imported)
                self._update_table()
                self.channels_changed.emit()
                self.show_info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(imported)}")
            else:
                self.show_error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤")
    
    def _create_from_template(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
        from models import ChannelFactory
        
        templates = {
            "YouTube (16:9)": "youtube",
            "Shorts/Reels (9:16)": "shorts",
            "Instagram (1:1)": "instagram",
            "Cinematic (21:9)": "cinematic"
        }
        
        template_name, ok = QInputDialog.getItem(
            self, "–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞",
            "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∫–∞–Ω–∞–ª–∞:",
            list(templates.keys()), 0, False
        )
        
        if ok and template_name:
            factory = ChannelFactory()
            template_id = templates[template_name]
            channel = factory.create_from_template(template_id)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            dialog = ChannelDialog(channel=channel, parent=self)
            if dialog.exec():
                channel = dialog.get_channel()
                self.channels.append(channel)
                self._update_table()
                self.channels_changed.emit()
                self.show_info(f"–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template_name}'")

# ==================== –í–ö–õ–ê–î–ö–ê –≠–§–§–ï–ö–¢–û–í ====================

class EffectsTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.channels: List[Channel] = []
        self.current_channel: Optional[Channel] = None
        self.effect_widgets = {}
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        channel_layout = QHBoxLayout()
        channel_layout.addWidget(QLabel("üì∫ –ö–∞–Ω–∞–ª:"))
        
        self.channel_combo = QComboBox()
        self.channel_combo.currentTextChanged.connect(self._load_channel_effects)
        channel_layout.addWidget(self.channel_combo)
        
        self.copy_btn = QPushButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤...")
        self.copy_btn.clicked.connect(self._copy_effects)
        channel_layout.addWidget(self.copy_btn)
        
        channel_layout.addStretch()
        layout.addLayout(channel_layout)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()
        
        # Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã
        self._create_ken_burns_section(scroll_layout)
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã
        self._create_transitions_section(scroll_layout)
        
        # Fade —ç—Ñ—Ñ–µ–∫—Ç—ã
        self._create_fade_section(scroll_layout)
        
        # –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        self._create_color_section(scroll_layout)
        
        # –ê—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç—ã
        self._create_audio_section(scroll_layout)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç—å
        self._create_animation_section(scroll_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_btn.setObjectName("primaryButton")
        save_btn.clicked.connect(self._save_effects)
        save_layout.addWidget(save_btn)
        
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        reset_btn.clicked.connect(self._reset_effects)
        save_layout.addWidget(reset_btn)
        
        save_layout.addStretch()
        scroll_layout.addLayout(save_layout)
        
        scroll_layout.addStretch()
        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        
        layout.addWidget(scroll)
        self.setLayout(layout)
    
    def set_channels(self, channels: List[Channel]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels = channels
        self._update_channel_combo()
    
    def _update_channel_combo(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        current = self.channel_combo.currentText()
        self.channel_combo.clear()
        self.channel_combo.addItems([ch.name for ch in self.channels])
        
        if current in [ch.name for ch in self.channels]:
            self.channel_combo.setCurrentText(current)
    
    def _create_ken_burns_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é Ken Burns —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        group = CollapsibleGroupBox("üé¨ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã")
        group_layout = QVBoxLayout()
        
        # –°–ø–∏—Å–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        effects_grid = QGridLayout()
        
        kb_effects = [
            ("zoomIn", "Zoom In", "–ü–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ"),
            ("zoomOut", "Zoom Out", "–ü–ª–∞–≤–Ω–æ–µ –æ—Ç–¥–∞–ª–µ–Ω–∏–µ"),
            ("panLeft", "Pan Left", "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ"),
            ("panRight", "Pan Right", "–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ"),
            ("panUp", "Pan Up", "–î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö"),
            ("panDown", "Pan Down", "–î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑"),
            ("rotate", "Rotate", "–í—Ä–∞—â–µ–Ω–∏–µ"),
            ("diagonal", "Diagonal", "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
            ("zoomRotate", "Zoom + Rotate", "–ó—É–º —Å –≤—Ä–∞—â–µ–Ω–∏–µ–º"),
            ("parallax", "Parallax", "–≠—Ñ—Ñ–µ–∫—Ç –ø–∞—Ä–∞–ª–ª–∞–∫—Å–∞"),
            ("spiral", "Spiral", "–°–ø–∏—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ"),
            ("shake", "Shake", "–õ–µ–≥–∫–∞—è —Ç—Ä—è—Å–∫–∞")
        ]
        
        self.kb_effects = {}
        for i, (effect_id, label, desc) in enumerate(kb_effects):
            widget = EffectCheckBox(effect_id, label, desc)
            self.kb_effects[effect_id] = widget
            effects_grid.addWidget(widget, i // 2, i % 2)
        
        group_layout.addLayout(effects_grid)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_layout = QFormLayout()
        
        self.kb_intensity = SliderWithLabel(0, 100, 30)
        settings_layout.addRow("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:", self.kb_intensity)
        
        self.kb_rotation = SliderWithLabel(0, 45, 5, "¬∞")
        settings_layout.addRow("–£–≥–æ–ª –≤—Ä–∞—â–µ–Ω–∏—è:", self.kb_rotation)
        
        self.kb_smooth = SliderWithLabel(0, 100, 70)
        settings_layout.addRow("–ü–ª–∞–≤–Ω–æ—Å—Ç—å:", self.kb_smooth)
        
        self.kb_randomize = QCheckBox("–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        settings_layout.addRow(self.kb_randomize)
        
        self.kb_smart_crop = QCheckBox("–£–º–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ (–±–µ–∑ —á–µ—Ä–Ω—ã—Ö –ø–æ–ª–æ—Å)")
        self.kb_smart_crop.setChecked(True)
        settings_layout.addRow(self.kb_smart_crop)
        
        # Easing
        self.kb_easing = QComboBox()
        self.kb_easing.addItems([
            "linear", "ease", "ease-in", "ease-out", 
            "ease-in-out", "bounce", "elastic", "back"
        ])
        self.kb_easing.setCurrentText("ease")
        settings_layout.addRow("–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏:", self.kb_easing)
        
        group_layout.addLayout(settings_layout)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _create_transitions_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
        group = CollapsibleGroupBox("üîÑ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏")
        group_layout = QVBoxLayout()
        
        # –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        trans_grid = QGridLayout()
        
        transitions = [
            ("fade", "Fade", "–ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ"),
            ("dissolve", "Cross Dissolve", "–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏–µ"),
            ("dip_black", "Dip to Black", "–ß–µ—Ä–µ–∑ —á–µ—Ä–Ω—ã–π"),
            ("dip_white", "Dip to White", "–ß–µ—Ä–µ–∑ –±–µ–ª—ã–π"),
            ("wipe", "Wipe", "–í—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ"),
            ("slide", "Slide", "–°–¥–≤–∏–≥"),
            ("push", "Push", "–í—ã—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ"),
            ("zoom", "Zoom", "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("blur", "Blur", "–†–∞–∑–º—ã—Ç–∏–µ"),
            ("pixelate", "Pixelate", "–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è"),
            ("glitch", "Glitch", "–¶–∏—Ñ—Ä–æ–≤–æ–π —Å–±–æ–π"),
            ("rotate", "Rotate", "–ü–æ–≤–æ—Ä–æ—Ç")
        ]
        
        self.transitions = {}
        for i, (trans_id, label, desc) in enumerate(transitions):
            widget = EffectCheckBox(trans_id, label, desc)
            self.transitions[trans_id] = widget
            trans_grid.addWidget(widget, i // 2, i % 2)
        
        group_layout.addLayout(trans_grid)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_layout = QFormLayout()
        
        self.trans_duration = QDoubleSpinBox()
        self.trans_duration.setRange(0.1, 3.0)
        self.trans_duration.setValue(1.0)
        self.trans_duration.setSingleStep(0.1)
        self.trans_duration.setSuffix(" —Å–µ–∫")
        settings_layout.addRow("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", self.trans_duration)
        
        self.trans_overlap = QDoubleSpinBox()
        self.trans_overlap.setRange(0.0, 1.0)
        self.trans_overlap.setValue(0.5)
        self.trans_overlap.setSingleStep(0.1)
        settings_layout.addRow("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ:", self.trans_overlap)
        
        self.trans_randomize = QCheckBox("–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
        settings_layout.addRow(self.trans_randomize)
        
        group_layout.addLayout(settings_layout)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _create_fade_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é Fade —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        group = CollapsibleGroupBox("üåë Fade In/Out —ç—Ñ—Ñ–µ–∫—Ç—ã")
        group_layout = QVBoxLayout()
        
        # Fade In
        fade_in_layout = QHBoxLayout()
        self.fade_in_check = QCheckBox("Fade In from Black (–ø–µ—Ä–≤—ã–π –∫–ª–∏–ø)")
        fade_in_layout.addWidget(self.fade_in_check)
        
        self.fade_in_duration = QDoubleSpinBox()
        self.fade_in_duration.setRange(0.1, 5.0)
        self.fade_in_duration.setValue(1.0)
        self.fade_in_duration.setSingleStep(0.1)
        self.fade_in_duration.setSuffix(" —Å–µ–∫")
        fade_in_layout.addWidget(QLabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"))
        fade_in_layout.addWidget(self.fade_in_duration)
        
        self.fade_in_type = QComboBox()
        self.fade_in_type.addItems(["linear", "ease", "ease-in", "ease-out"])
        self.fade_in_type.setCurrentText("ease")
        fade_in_layout.addWidget(QLabel("–¢–∏–ø:"))
        fade_in_layout.addWidget(self.fade_in_type)
        
        fade_in_layout.addStretch()
        group_layout.addLayout(fade_in_layout)
        
        # Fade Out
        fade_out_layout = QHBoxLayout()
        self.fade_out_check = QCheckBox("Fade Out to Black (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–ø)")
        fade_out_layout.addWidget(self.fade_out_check)
        
        self.fade_out_duration = QDoubleSpinBox()
        self.fade_out_duration.setRange(0.1, 5.0)
        self.fade_out_duration.setValue(1.0)
        self.fade_out_duration.setSingleStep(0.1)
        self.fade_out_duration.setSuffix(" —Å–µ–∫")
        fade_out_layout.addWidget(QLabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"))
        fade_out_layout.addWidget(self.fade_out_duration)
        
        self.fade_out_type = QComboBox()
        self.fade_out_type.addItems(["linear", "ease", "ease-in", "ease-out"])
        self.fade_out_type.setCurrentText("ease")
        fade_out_layout.addWidget(QLabel("–¢–∏–ø:"))
        fade_out_layout.addWidget(self.fade_out_type)
        
        fade_out_layout.addStretch()
        group_layout.addLayout(fade_out_layout)
        
        # –ß–µ—Ä–Ω—ã–π –∫–∞–¥—Ä
        self.add_black_frame = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–Ω—ã–π –∫–∞–¥—Ä –≤ –∫–æ–Ω–µ—Ü")
        self.add_black_frame.setChecked(True)
        group_layout.addWidget(self.add_black_frame)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _create_color_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
        group = CollapsibleGroupBox("üé® –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è")
        group_layout = QVBoxLayout()
        
        self.color_correction = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é")
        self.color_correction.toggled.connect(self._on_color_correction_toggled)
        group_layout.addWidget(self.color_correction)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–∞
        self.color_widget = QWidget()
        color_layout = QFormLayout()
        
        self.color_filter = QComboBox()
        self.color_filter.addItems([
            "none", "warm", "cold", "vintage", "blackwhite", "sepia",
            "cinematic", "vibrant", "faded", "instagram", "film"
        ])
        color_layout.addRow("–§–∏–ª—å—Ç—Ä:", self.color_filter)
        
        # –í–∏–Ω—å–µ—Ç–∫–∞
        vignette_layout = QHBoxLayout()
        self.vignette_check = QCheckBox("–í–∏–Ω—å–µ—Ç–∫–∞")
        vignette_layout.addWidget(self.vignette_check)
        self.vignette_intensity = SliderWithLabel(0, 100, 40)
        vignette_layout.addWidget(self.vignette_intensity)
        color_layout.addRow(vignette_layout)
        
        # –ó–µ—Ä–Ω–æ
        grain_layout = QHBoxLayout()
        self.grain_check = QCheckBox("–ó–µ—Ä–Ω–æ –ø–ª–µ–Ω–∫–∏")
        grain_layout.addWidget(self.grain_check)
        self.grain_intensity = SliderWithLabel(0, 100, 20)
        grain_layout.addWidget(self.grain_intensity)
        color_layout.addRow(grain_layout)
        
        # –†–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤
        blur_layout = QHBoxLayout()
        self.blur_edges_check = QCheckBox("–†–∞–∑–º—ã—Ç–∏–µ –∫—Ä–∞–µ–≤")
        blur_layout.addWidget(self.blur_edges_check)
        self.blur_intensity = SliderWithLabel(0, 100, 30)
        blur_layout.addWidget(self.blur_intensity)
        color_layout.addRow(blur_layout)
        
        self.color_widget.setLayout(color_layout)
        self.color_widget.setVisible(False)
        group_layout.addWidget(self.color_widget)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _create_audio_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –∞—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        group = CollapsibleGroupBox("üéµ –ê—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        group_layout = QFormLayout()
        
        # –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        self.audio_pitch = QComboBox()
        pitches = [
            "-3", "-2.5", "-2", "-1.5", "-1", "-0.5", "0",
            "+0.5", "+1", "+1.5", "+2", "+2.5", "+3"
        ]
        self.audio_pitch.addItems(pitches)
        self.audio_pitch.setCurrentText("0")
        group_layout.addRow("–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:", self.audio_pitch)
        
        # –≠—Ñ—Ñ–µ–∫—Ç
        self.audio_effect = QComboBox()
        self.audio_effect.addItems([
            "none", "bass", "reverb", "echo", "chorus", "telephone",
            "underwater", "radio", "vintage", "distortion", "robot"
        ])
        group_layout.addRow("–≠—Ñ—Ñ–µ–∫—Ç:", self.audio_effect)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.audio_stereo = QCheckBox("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç–µ—Ä–µ–æ")
        group_layout.addRow(self.audio_stereo)
        
        self.audio_normalize = QCheckBox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
        self.audio_normalize.setChecked(True)
        group_layout.addRow(self.audio_normalize)
        
        self.audio_compressor = QCheckBox("–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä")
        group_layout.addRow(self.audio_compressor)
        
        self.audio_limiter = QCheckBox("–õ–∏–º–∏—Ç–µ—Ä")
        group_layout.addRow(self.audio_limiter)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _create_animation_section(self, layout: QVBoxLayout):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∏–º–∞—Ü–∏–∏"""
        group = CollapsibleGroupBox("‚ö° –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")
        group_layout = QFormLayout()
        
        # Motion blur
        motion_layout = QHBoxLayout()
        self.motion_blur = QCheckBox("Motion Blur")
        motion_layout.addWidget(self.motion_blur)
        self.motion_blur_amount = SliderWithLabel(0, 50, 20)
        motion_layout.addWidget(self.motion_blur_amount)
        group_layout.addRow(motion_layout)
        
        # 3D Parallax
        self.parallax_enabled = QCheckBox("3D Parallax —ç—Ñ—Ñ–µ–∫—Ç (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
        self.parallax_enabled.toggled.connect(self._on_parallax_toggled)
        group_layout.addRow(self.parallax_enabled)
        
        # Parallax –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.parallax_widget = QWidget()
        parallax_layout = QFormLayout()
        
        self.parallax_layers = QSpinBox()
        self.parallax_layers.setRange(2, 5)
        self.parallax_layers.setValue(3)
        parallax_layout.addRow("–°–ª–æ–∏ –≥–ª—É–±–∏–Ω—ã:", self.parallax_layers)
        
        self.parallax_speed = QDoubleSpinBox()
        self.parallax_speed.setRange(0.1, 3.0)
        self.parallax_speed.setValue(1.0)
        self.parallax_speed.setSingleStep(0.1)
        parallax_layout.addRow("–°–∫–æ—Ä–æ—Å—Ç—å:", self.parallax_speed)
        
        self.parallax_direction = QComboBox()
        self.parallax_direction.addItems(["horizontal", "vertical", "diagonal"])
        parallax_layout.addRow("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", self.parallax_direction)
        
        self.parallax_widget.setLayout(parallax_layout)
        self.parallax_widget.setVisible(False)
        group_layout.addRow(self.parallax_widget)
        
        group.setLayout(group_layout)
        layout.addWidget(group)
    
    def _on_color_correction_toggled(self, checked: bool):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏"""
        self.color_widget.setVisible(checked)
    
    def _on_parallax_toggled(self, checked: bool):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è parallax"""
        self.parallax_widget.setVisible(checked)
    
    def _load_channel_effects(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        channel_name = self.channel_combo.currentText()
        if not channel_name:
            return
        
        self.current_channel = next((ch for ch in self.channels if ch.name == channel_name), None)
        if not self.current_channel:
            return
        
        effects = self.current_channel.effects
        
        # Ken Burns
        for effect_id, widget in self.kb_effects.items():
            widget.setChecked(effect_id in effects.ken_burns)
        
        self.kb_intensity.setValue(effects.ken_burns_intensity)
        self.kb_rotation.setValue(effects.rotation_angle)
        self.kb_smooth.setValue(int(effects.kb_smooth_factor * 100))
        self.kb_randomize.setChecked(effects.kb_randomize)
        self.kb_smart_crop.setChecked(effects.smart_crop)
        self.kb_easing.setCurrentText(effects.easing_type)
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã
        for trans_id, widget in self.transitions.items():
            widget.setChecked(trans_id in effects.transitions)
        
        self.trans_duration.setValue(effects.transition_duration)
        self.trans_overlap.setValue(effects.trans_overlap)
        self.trans_randomize.setChecked(effects.trans_randomize)
        
        # Fade
        self.fade_in_check.setChecked(effects.fade_in_from_black)
        self.fade_in_duration.setValue(effects.fade_in_duration)
        self.fade_in_type.setCurrentText(effects.fade_in_type)
        self.fade_out_check.setChecked(effects.fade_out_to_black)
        self.fade_out_duration.setValue(effects.fade_out_duration)
        self.fade_out_type.setCurrentText(effects.fade_out_type)
        self.add_black_frame.setChecked(effects.add_black_frame)
        
        # –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        self.color_correction.setChecked(effects.color_correction)
        self.color_filter.setCurrentText(effects.color_filter)
        self.vignette_check.setChecked(effects.vignette)
        self.vignette_intensity.setValue(effects.vignette_intensity)
        self.grain_check.setChecked(effects.grain)
        self.grain_intensity.setValue(effects.grain_intensity)
        self.blur_edges_check.setChecked(effects.blur_edges)
        self.blur_intensity.setValue(effects.blur_intensity)
        
        # –ê—É–¥–∏–æ
        self.audio_pitch.setCurrentText(effects.audio_pitch)
        self.audio_effect.setCurrentText(effects.audio_effect)
        self.audio_stereo.setChecked(effects.audio_stereo_enhance)
        self.audio_normalize.setChecked(effects.audio_normalize)
        self.audio_compressor.setChecked(effects.audio_compressor)
        self.audio_limiter.setChecked(effects.audio_limiter)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.motion_blur.setChecked(effects.motion_blur)
        self.motion_blur_amount.setValue(effects.motion_blur_amount)
        self.parallax_enabled.setChecked(effects.enable_3d_parallax)
        self.parallax_layers.setValue(effects.parallax_depth_layers)
        self.parallax_speed.setValue(effects.parallax_speed)
        self.parallax_direction.setCurrentText(effects.parallax_direction)
    
    def _copy_effects(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

    def _reset_effects(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        print("–°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

    def _save_effects(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if not self.current_channel:
            self.show_warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª")
            return
        
        effects = self.current_channel.effects
        
        # Ken Burns
        if hasattr(self, "motion_intensity"):
            effects.motion_intensity = self.motion_intensity.value()
        else:
            effects.motion_intensity = 30
        effects.effect_frequency = self.effect_frequency.currentData()
        effects.effect_percent = self.effect_percent.value()
        effects.effect_every = self.effect_every.value()
        effects.capcut_timing = self.capcut_timing.currentData()
        effects.avoid_repetition = self.avoid_repetition.isChecked()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        effects.validate()
        
        self.show_info(f"CapCut —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{self.current_channel.name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def _apply_preset(self, preset_id: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Å–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        presets = {
            "dynamic": {
                "scale": ["zoomBurst", "bounce"],
                "motion": ["shake", "wobble"],
                "digital": ["glitch"],
                "scale_amplitude": 25,
                "motion_intensity": 40,
                "frequency": "percent",
                "percent": 60,
                "timing": "random"
            },
            "smooth": {
                "scale": ["pulse", "wave", "breathe"],
                "motion": ["pendulum"],
                "digital": [],
                "scale_amplitude": 10,
                "motion_intensity": 20,
                "frequency": "every",
                "every": 3,
                "timing": "middle"
            },
            "epic": {
                "scale": ["zoomBurst", "elastic"],
                "motion": ["shake", "spin"],
                "digital": ["glitch", "chromatic"],
                "scale_amplitude": 30,
                "zoom_burst_start": 180,
                "zoom_burst_decay": 90,
                "motion_intensity": 50,
                "frequency": "all",
                "timing": "start"
            },
            "minimal": {
                "scale": ["pulse"],
                "motion": [],
                "digital": [],
                "scale_amplitude": 5,
                "motion_intensity": 10,
                "frequency": "percent",
                "percent": 30,
                "timing": "end"
            }
        }
        
        preset = presets.get(preset_id)
        if not preset:
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ—Å–µ—Ç
        for effect_id, widget in self.scale_effects.items():
            widget.setChecked(effect_id in preset.get("scale", []))
        
        for effect_id, widget in self.motion_effects.items():
            widget.setChecked(effect_id in preset.get("motion", []))
        
        for effect_id, widget in self.digital_effects.items():
            widget.setChecked(effect_id in preset.get("digital", []))
        
        self.scale_amplitude.setValue(preset.get("scale_amplitude", 15))
        
        if "zoom_burst_start" in preset:
            self.zoom_burst_start.setValue(preset["zoom_burst_start"])
        if "zoom_burst_decay" in preset:
            self.zoom_burst_decay.setValue(preset["zoom_burst_decay"])
        
        self.motion_intensity.setValue(preset.get("motion_intensity", 30))
        
        # –ß–∞—Å—Ç–æ—Ç–∞
        for i in range(self.effect_frequency.count()):
            if self.effect_frequency.itemData(i) == preset.get("frequency", "all"):
                self.effect_frequency.setCurrentIndex(i)
                break
        
        if "percent" in preset:
            self.effect_percent.setValue(preset["percent"])
        if "every" in preset:
            self.effect_every.setValue(preset["every"])
        
        # –¢–∞–π–º–∏–Ω–≥
        for i in range(self.capcut_timing.count()):
            if self.capcut_timing.itemData(i) == preset.get("timing", "start"):
                self.capcut_timing.setCurrentIndex(i)
                break
        
        self.show_info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç '{preset_id}'")

# ==================== –í–ö–õ–ê–î–ö–ê –û–í–ï–†–õ–ï–ï–í ====================

class OverlaysTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.channels: List[Channel] = []
        self.current_channel: Optional[Channel] = None
        self.overlay_files: List[str] = []
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è–º–∏
        control_group = QGroupBox("üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è–º–∏")
        control_layout = QVBoxLayout()
        
        folder_layout = QHBoxLayout()
        folder_layout.addWidget(QLabel("–ü–∞–ø–∫–∞ —Å –æ–≤–µ—Ä–ª–µ—è–º–∏:"))
        
        self.folder_selector = FilePathSelector(
            mode="folder",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –æ–≤–µ—Ä–ª–µ—è–º–∏..."
        )
        self.folder_selector.pathChanged.connect(self._scan_overlay_folder)
        folder_layout.addWidget(self.folder_selector)
        
        control_layout.addLayout(folder_layout)
        
        info_label = QLabel(
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PNG (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é), MP4, MOV, GIF"
        )
        info_label.setObjectName("infoLabel")
        control_layout.addWidget(info_label)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.files_info = QLabel("–§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: 0")
        control_layout.addWidget(self.files_info)
        
        control_group.setLayout(control_layout)
        layout.addWidget(control_group)
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ–µ–≤
        assign_group = QGroupBox("üì∫ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ–µ–≤ –∫–∞–Ω–∞–ª–∞–º")
        assign_layout = QVBoxLayout()
        
        channel_layout = QHBoxLayout()
        channel_layout.addWidget(QLabel("–ö–∞–Ω–∞–ª:"))
        
        self.channel_combo = QComboBox()
        self.channel_combo.currentTextChanged.connect(self._load_channel_overlays)
        channel_layout.addWidget(self.channel_combo)
        channel_layout.addStretch()
        assign_layout.addLayout(channel_layout)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤
        self.overlay_widget = QWidget()
        overlay_layout = QVBoxLayout()
        
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files_group = QGroupBox("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–≤–µ—Ä–ª–µ–∏")
        files_layout = QVBoxLayout()
        
        self.files_list = QListWidget()
        self.files_list.setSelectionMode(QListWidget.MultiSelection)
        files_layout.addWidget(self.files_list)
        
        files_group.setLayout(files_layout)
        overlay_layout.addWidget(files_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è")
        settings_layout = QFormLayout()
        
        # –†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        self.blend_mode = QComboBox()
        self.blend_mode.addItems([
            ("normal", "–û–±—ã—á–Ω—ã–π"),
            ("screen", "–≠–∫—Ä–∞–Ω"),
            ("overlay", "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ"),
            ("multiply", "–£–º–Ω–æ–∂–µ–Ω–∏–µ"),
            ("add", "–°–ª–æ–∂–µ–Ω–∏–µ"),
            ("lighten", "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ"),
            ("darken", "–ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ")
        ])
        self.blend_mode.setCurrentIndex(1)  # screen
        settings_layout.addRow("–†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è:", self.blend_mode)
        
        # –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.opacity_slider = SliderWithLabel(0, 100, 100)
        settings_layout.addRow("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:", self.opacity_slider)
        
        # –ü–æ–∑–∏—Ü–∏—è
        self.position_combo = QComboBox()
        self.position_combo.addItems([
            ("center", "–ü–æ —Ü–µ–Ω—Ç—Ä—É"),
            ("top-left", "–°–≤–µ—Ä—Ö—É —Å–ª–µ–≤–∞"),
            ("top-right", "–°–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞"),
            ("bottom-left", "–°–Ω–∏–∑—É —Å–ª–µ–≤–∞"),
            ("bottom-right", "–°–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞")
        ])
        settings_layout.addRow("–ü–æ–∑–∏—Ü–∏—è:", self.position_combo)
        
        # –ú–∞—Å—à—Ç–∞–±
        self.scale_slider = SliderWithLabel(10, 200, 100)
        settings_layout.addRow("–ú–∞—Å—à—Ç–∞–±:", self.scale_slider)
        
        # –ü–æ–≤–æ—Ä–æ—Ç
        self.rotation_slider = SliderWithLabel(-180, 180, 0, "¬∞")
        settings_layout.addRow("–ü–æ–≤–æ—Ä–æ—Ç:", self.rotation_slider)
        
        # –û–ø—Ü–∏–∏
        self.randomize_check = QCheckBox("–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–≤–µ—Ä–ª–µ–µ–≤")
        settings_layout.addRow(self.randomize_check)
        
        self.stretch_check = QCheckBox("–†–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω")
        self.stretch_check.setChecked(True)
        settings_layout.addRow(self.stretch_check)
        
        self.animate_check = QCheckBox("–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –æ–≤–µ—Ä–ª–µ–π")
        self.animate_check.toggled.connect(self._on_animate_toggled)
        settings_layout.addRow(self.animate_check)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation_widget = QWidget()
        animation_layout = QHBoxLayout()
        animation_layout.setContentsMargins(0, 0, 0, 0)
        
        animation_layout.addWidget(QLabel("–¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏:"))
        self.animation_type = QComboBox()
        self.animation_type.addItems([
            ("fade", "–ó–∞—Ç—É—Ö–∞–Ω–∏–µ"),
            ("slide", "–°–¥–≤–∏–≥"),
            ("zoom", "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            ("rotate", "–í—Ä–∞—â–µ–Ω–∏–µ")
        ])
        animation_layout.addWidget(self.animation_type)
        animation_layout.addStretch()
        
        self.animation_widget.setLayout(animation_layout)
        self.animation_widget.setVisible(False)
        settings_layout.addRow(self.animation_widget)
        
        settings_group.setLayout(settings_layout)
        overlay_layout.addWidget(settings_group)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤")
        save_btn.setObjectName("primaryButton")
        save_btn.clicked.connect(self._save_overlays)
        overlay_layout.addWidget(save_btn)
        
        self.overlay_widget.setLayout(overlay_layout)
        self.overlay_widget.setVisible(False)
        assign_layout.addWidget(self.overlay_widget)
        
        assign_group.setLayout(assign_layout)
        layout.addWidget(assign_group)
        
        layout.addStretch()
        self.setLayout(layout)
    
    def set_channels(self, channels: List[Channel]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels = channels
        self._update_channel_combo()
    
    def _update_channel_combo(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        current = self.channel_combo.currentText()
        self.channel_combo.clear()
        self.channel_combo.addItems([ch.name for ch in self.channels])
        
        if current in [ch.name for ch in self.channels]:
            self.channel_combo.setCurrentText(current)
    
    def _scan_overlay_folder(self, folder: str):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å –æ–≤–µ—Ä–ª–µ—è–º–∏"""
        if not folder:
            return
        
        from utils import FileUtils
        
        overlay_files = []
        folder_path = Path(folder)
        
        for file_path in folder_path.iterdir():
            if file_path.is_file() and FileUtils.is_overlay(file_path):
                overlay_files.append(file_path.name)
        
        self.overlay_files = sorted(overlay_files)
        self.files_info.setText(f"–§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(self.overlay_files)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        self._update_files_list()
    
    def _update_files_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"""
        self.files_list.clear()
        
        for file_name in self.overlay_files:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
            ext = Path(file_name).suffix.lower()
            if ext == '.png':
                icon = "üñºÔ∏è"
            elif ext in ['.mp4', '.mov']:
                icon = "üé¨"
            elif ext == '.gif':
                icon = "üéûÔ∏è"
            else:
                icon = "üìÑ"
            
            self.files_list.addItem(f"{icon} {file_name}")
    
    def _on_animate_toggled(self, checked: bool):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏"""
        self.animation_widget.setVisible(checked)
    
    def _load_channel_overlays(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤ –∫–∞–Ω–∞–ª–∞"""
        channel_name = self.channel_combo.currentText()
        if not channel_name:
            self.overlay_widget.setVisible(False)
            return
        
        self.current_channel = next((ch for ch in self.channels if ch.name == channel_name), None)
        if not self.current_channel:
            return
        
        self.overlay_widget.setVisible(True)
        overlays = self.current_channel.overlays
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if overlays.folder:
            self.folder_selector.set_path(overlays.folder)
        
        # –†–µ–∂–∏–º –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        for i in range(self.blend_mode.count()):
            if self.blend_mode.itemData(i) == overlays.blend_mode:
                self.blend_mode.setCurrentIndex(i)
                break
        
        self.opacity_slider.setValue(overlays.opacity)
        
        # –ü–æ–∑–∏—Ü–∏—è
        for i in range(self.position_combo.count()):
            if self.position_combo.itemData(i) == overlays.position:
                self.position_combo.setCurrentIndex(i)
                break
        
        self.scale_slider.setValue(overlays.scale)
        self.rotation_slider.setValue(overlays.rotation)
        self.randomize_check.setChecked(overlays.randomize)
        self.stretch_check.setChecked(overlays.stretch)
        self.animate_check.setChecked(overlays.animate)
        
        # –¢–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏
        for i in range(self.animation_type.count()):
            if self.animation_type.itemData(i) == overlays.animation_type:
                self.animation_type.setCurrentIndex(i)
                break
        
        # –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.files_list.clearSelection()
        for i in range(self.files_list.count()):
            item_text = self.files_list.item(i).text()
            # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            file_name = item_text.split(' ', 1)[1] if ' ' in item_text else item_text
            if file_name in overlays.files:
                self.files_list.item(i).setSelected(True)
    
    def _save_overlays(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤"""
        if not self.current_channel:
            self.show_warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        selected_files = []
        for item in self.files_list.selectedItems():
            # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É
            text = item.text()
            file_name = text.split(' ', 1)[1] if ' ' in text else text
            selected_files.append(file_name)
        
        overlays = self.current_channel.overlays
        
        overlays.enabled = len(selected_files) > 0
        overlays.folder = self.folder_selector.get_path()
        overlays.files = selected_files
        overlays.blend_mode = self.blend_mode.currentData()
        overlays.opacity = self.opacity_slider.value()
        overlays.position = self.position_combo.currentData()
        overlays.scale = self.scale_slider.value()
        overlays.rotation = self.rotation_slider.value()
        overlays.randomize = self.randomize_check.isChecked()
        overlays.stretch = self.stretch_check.isChecked()
        overlays.animate = self.animate_check.isChecked()
        overlays.animation_type = self.animation_type.currentData()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        overlays.validate()
        
        self.show_info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≤–µ—Ä–ª–µ–µ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{self.current_channel.name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

# ==================== –í–ö–õ–ê–î–ö–ê –ù–ê–°–¢–†–û–ï–ö ====================

class SettingsTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    settings_changed = Signal()
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()
        
        # –ü—É—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º
        paths_group = QGroupBox("üìÅ –ü—É—Ç–∏ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º")
        paths_layout = QFormLayout()
        
        # FFmpeg
        self.ffmpeg_selector = FilePathSelector(
            mode="file",
            filter="Executable files (*.exe);;All files (*.*)",
            placeholder="–ü—É—Ç—å –∫ FFmpeg..."
        )
        
        ffmpeg_layout = QHBoxLayout()
        ffmpeg_layout.addWidget(self.ffmpeg_selector)
        
        check_btn = QPushButton("‚úì –ü—Ä–æ–≤–µ—Ä–∏—Ç—å")
        check_btn.clicked.connect(self._check_ffmpeg)
        ffmpeg_layout.addWidget(check_btn)
        
        paths_layout.addRow("FFmpeg:", ffmpeg_layout)
        
        paths_group.setLayout(paths_layout)
        scroll_layout.addWidget(paths_group)
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        performance_group = QGroupBox("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        performance_layout = QFormLayout()
        
        self.use_gpu_check = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        self.use_gpu_check.setChecked(True)
        performance_layout.addRow(self.use_gpu_check)
        
        # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.gpu_info = QLabel("–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU...")
        self.gpu_info.setObjectName("infoLabel")
        performance_layout.addRow("–î–æ—Å—Ç—É–ø–Ω—ã–µ GPU:", self.gpu_info)
        
        self.two_pass_check = QCheckBox("–î–≤—É—Ö–ø—Ä–æ—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)")
        performance_layout.addRow(self.two_pass_check)
        
        self.preview_res = QComboBox()
        self.preview_res.addItems(["360p", "480p", "720p", "–û—Ä–∏–≥–∏–Ω–∞–ª"])
        self.preview_res.setCurrentText("480p")
        performance_layout.addRow("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é:", self.preview_res)
        
        performance_group.setLayout(performance_layout)
        scroll_layout.addWidget(performance_group)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        files_group = QGroupBox("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤")
        files_layout = QFormLayout()
        
        self.safe_filenames = QCheckBox("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)")
        self.safe_filenames.setChecked(True)
        files_layout.addRow(self.safe_filenames)
        
        self.keep_temp_files = QCheckBox("–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        files_layout.addRow(self.keep_temp_files)
        
        self.auto_cleanup = QCheckBox("–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤")
        files_layout.addRow(self.auto_cleanup)
        
        files_group.setLayout(files_layout)
        scroll_layout.addWidget(files_group)
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        ui_group = QGroupBox("üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        ui_layout = QFormLayout()
        
        theme_layout = QHBoxLayout()
        self.dark_theme = QRadioButton("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
        self.dark_theme.setChecked(True)
        theme_layout.addWidget(self.dark_theme)
        
        self.light_theme = QRadioButton("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")
        self.light_theme.setEnabled(False)  # –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        theme_layout.addWidget(self.light_theme)
        
        ui_layout.addRow("–¢–µ–º–∞:", theme_layout)
        
        self.show_tooltips = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        self.show_tooltips.setChecked(True)
        ui_layout.addRow(self.show_tooltips)
        
        ui_group.setLayout(ui_layout)
        scroll_layout.addWidget(ui_group)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        save_btn.setObjectName("primaryButton")
        save_btn.clicked.connect(self._save_settings)
        buttons_layout.addWidget(save_btn)
        
        reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        reset_btn.clicked.connect(self._reset_settings)
        buttons_layout.addWidget(reset_btn)
        
        export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self._export_settings)
        buttons_layout.addWidget(export_btn)
        
        import_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç")
        import_btn.clicked.connect(self._import_settings)
        buttons_layout.addWidget(import_btn)
        
        buttons_layout.addStretch()
        scroll_layout.addLayout(buttons_layout)
        
        # –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        about_group = QGroupBox("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_layout = QVBoxLayout()
        
        about_text = """<b>Auto Montage Builder Pro</b><br>
Enhanced Python Edition v5.0.0<br><br>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b><br>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ç–∞–π–º–ª–∞–π–Ω–µ<br>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º<br>
‚Ä¢ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π<br>
‚Ä¢ CapCut-style —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏<br>
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª–∏–ø–∞–º–∏<br>
‚Ä¢ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ<br><br>

<b>–ê–≤—Ç–æ—Ä:</b> AutoMontage Team<br>
<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> automontage@support.com
"""
        
        about_label = QLabel(about_text)
        about_label.setWordWrap(True)
        about_layout.addWidget(about_label)
        
        about_group.setLayout(about_layout)
        scroll_layout.addWidget(about_group)
        
        scroll_layout.addStretch()
        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        
        layout.addWidget(scroll)
        self.setLayout(layout)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
        self._check_gpu_support()
    
    def load_settings(self, settings: dict):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        from utils import FFmpegUtils
        
        self.ffmpeg_selector.set_path(
            settings.get("ffmpeg_path", FFmpegUtils.get_ffmpeg_path())
        )
        self.use_gpu_check.setChecked(settings.get("use_gpu", True))
        self.two_pass_check.setChecked(settings.get("two_pass", False))
        self.preview_res.setCurrentText(settings.get("preview_resolution", "480p"))
        self.safe_filenames.setChecked(settings.get("safe_filenames", True))
        self.keep_temp_files.setChecked(settings.get("keep_temp_files", False))
        self.auto_cleanup.setChecked(settings.get("auto_cleanup", False))
        self.show_tooltips.setChecked(settings.get("show_tooltips", True))
        self.dark_theme.setChecked(settings.get("dark_theme", True))
    
    def get_settings(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return {
            "ffmpeg_path": self.ffmpeg_selector.get_path(),
            "use_gpu": self.use_gpu_check.isChecked(),
            "two_pass": self.two_pass_check.isChecked(),
            "preview_resolution": self.preview_res.currentText(),
            "safe_filenames": self.safe_filenames.isChecked(),
            "keep_temp_files": self.keep_temp_files.isChecked(),
            "auto_cleanup": self.auto_cleanup.isChecked(),
            "show_tooltips": self.show_tooltips.isChecked(),
            "dark_theme": self.dark_theme.isChecked()
        }
    
    def _check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç FFmpeg"""
        from utils import FFmpegUtils
        
        ffmpeg_path = self.ffmpeg_selector.get_path()
        if not ffmpeg_path:
            ffmpeg_path = FFmpegUtils.get_ffmpeg_path()
        
        version = FFmpegUtils.get_ffmpeg_version()
        if version:
            self.show_info(f"FFmpeg –Ω–∞–π–¥–µ–Ω!\n{version}")
        else:
            self.show_error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def _check_gpu_support(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É GPU"""
        from utils import FFmpegUtils
        
        gpu_support = FFmpegUtils.check_gpu_support()
        
        gpu_text = []
        if gpu_support.get('nvidia'):
            gpu_text.append("‚úÖ NVIDIA")
        if gpu_support.get('amd'):
            gpu_text.append("‚úÖ AMD")
        if gpu_support.get('intel'):
            gpu_text.append("‚úÖ Intel")
        if gpu_support.get('videotoolbox'):
            gpu_text.append("‚úÖ VideoToolbox")
        
        if not gpu_text:
            gpu_text.append("‚ùå GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        self.gpu_info.setText(" ‚Ä¢ ".join(gpu_text))
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings_changed.emit()
        self.show_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def _reset_settings(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if self.confirm_action("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            from models import DataManager
            data_manager = DataManager()
            default_settings = data_manager.get_default_settings()
            self.load_settings(default_settings)
            self.settings_changed.emit()
            self.show_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            f"settings_{time.strftime('%Y%m%d_%H%M%S')}.json",
            "JSON files (*.json)"
        )
        
        if file_path:
            import json
            settings = self.get_settings()
            
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, indent=2, ensure_ascii=False)
                self.show_info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {file_path}")
            except Exception as e:
                self.show_error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    
    def _import_settings(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "", "JSON files (*.json)"
        )
        
        if file_path:
            import json
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                self.load_settings(settings)
                self.settings_changed.emit()
                self.show_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                self.show_error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
                ken_burns = [eid for eid, w in self.kb_effects.items() if w.isChecked()]
        effects.ken_burns_intensity = self.kb_intensity.value()
        effects.rotation_angle = self.kb_rotation.value()
        effects.kb_smooth_factor = self.kb_smooth.value() / 100.0
        effects.kb_randomize = self.kb_randomize.isChecked()
        effects.smart_crop = self.kb_smart_crop.isChecked()
        effects.easing_type = self.kb_easing.currentText()
        
        # –ü–µ—Ä–µ—Ö–æ–¥—ã
        effects.transitions = [tid for tid, w in self.transitions.items() if w.isChecked()]
        effects.transition_duration = self.trans_duration.value()
        effects.trans_overlap = self.trans_overlap.value()
        effects.trans_randomize = self.trans_randomize.isChecked()
        
        # Fade
        effects.fade_in_from_black = self.fade_in_check.isChecked()
        effects.fade_in_duration = self.fade_in_duration.value()
        effects.fade_in_type = self.fade_in_type.currentText()
        effects.fade_out_to_black = self.fade_out_check.isChecked()
        effects.fade_out_duration = self.fade_out_duration.value()
        effects.fade_out_type = self.fade_out_type.currentText()
        effects.add_black_frame = self.add_black_frame.isChecked()
        
        # –¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        effects.color_correction = self.color_correction.isChecked()
        effects.color_filter = self.color_filter.currentText()
        effects.vignette = self.vignette_check.isChecked()
        effects.vignette_intensity = self.vignette_intensity.value()
        effects.grain = self.grain_check.isChecked()
        effects.grain_intensity = self.grain_intensity.value()
        effects.blur_edges = self.blur_edges_check.isChecked()
        effects.blur_intensity = self.blur_intensity.value()
        
        # –ê—É–¥–∏–æ
        effects.audio_pitch = self.audio_pitch.currentText()
        effects.audio_effect = self.audio_effect.currentText()
        effects.audio_stereo_enhance = self.audio_stereo.isChecked()
        effects.audio_normalize = self.audio_normalize.isChecked()
        effects.audio_compressor = self.audio_compressor.isChecked()
        effects.audio_limiter = self.audio_limiter.isChecked()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        effects.motion_blur = self.motion_blur.isChecked()
        effects.motion_blur_amount = self.motion_blur_amount.value()
        effects.enable_3d_parallax = self.parallax_enabled.isChecked()
        effects.parallax_depth_layers = self.parallax_layers.value()
        effects.parallax_speed = self.parallax_speed.value()
        effects.parallax_direction = self.parallax_direction.currentText()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        effects.validate()
        
        self.show_info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{self.current_channel.name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    def _copy_effects(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

    def _reset_effects(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        if not self.current_channel:
            return
        
        if self.confirm_action("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            self.current_channel.effects = EffectSettings()
            self._load_channel_effects()
            self.show_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def _copy_effects(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª"""
        if not self.current_channel:
            return
        
        other_channels = [ch for ch in self.channels if ch.id != self.current_channel.id]
        if not other_channels:
            self.show_info("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        channel_names = [ch.name for ch in other_channels]
        target_name, ok = QInputDialog.getItem(
            self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
            channel_names, 0, False
        )
        
        if ok and target_name:
            target_channel = next((ch for ch in other_channels if ch.name == target_name), None)
            if target_channel:
                from dataclasses import asdict
                target_channel.effects = EffectSettings(**asdict(self.current_channel.effects))
                self.show_info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª '{target_name}'")

# ==================== –í–ö–õ–ê–î–ö–ê CAPCUT –≠–§–§–ï–ö–¢–û–í ====================

class CapCutTab(BaseWidget):
    """–í–∫–ª–∞–¥–∫–∞ CapCut —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.channels: List[Channel] = []
        self.current_channel: Optional[Channel] = None
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        channel_layout = QHBoxLayout()
        channel_layout.addWidget(QLabel("üì∫ –ö–∞–Ω–∞–ª:"))
        
        self.channel_combo = QComboBox()
        self.channel_combo.currentTextChanged.connect(self._load_channel_effects)
        channel_layout.addWidget(self.channel_combo)
        channel_layout.addStretch()
        layout.addLayout(channel_layout)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout()
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∞
        scale_group = CollapsibleGroupBox("üîç –ê–Ω–∏–º–∞—Ü–∏–∏ –º–∞—Å—à—Ç–∞–±–∞")
        scale_layout = QVBoxLayout()
        
        scale_grid = QGridLayout()
        
        scale_effects = [
            ("zoomBurst", "Zoom Burst", "–†–µ–∑–∫–∏–π –∑—É–º —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º"),
            ("pulse", "Pulse", "–ü—É–ª—å—Å–∞—Ü–∏—è"),
            ("bounce", "Bounce", "–û—Ç—Å–∫–æ–∫"),
            ("elastic", "Elastic", "–≠–ª–∞—Å—Ç–∏—á–Ω—ã–π"),
            ("wave", "Wave", "–í–æ–ª–Ω–∞"),
            ("breathe", "Breathe", "–î—ã—Ö–∞–Ω–∏–µ")
        ]
        
        self.scale_effects = {}
        for i, (effect_id, label, desc) in enumerate(scale_effects):
            widget = EffectCheckBox(effect_id, label, desc)
            self.scale_effects[effect_id] = widget
            scale_grid.addWidget(widget, i // 2, i % 2)
        
        scale_layout.addLayout(scale_grid)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∞
        scale_settings = QFormLayout()
        
        self.scale_amplitude = SliderWithLabel(0, 50, 15)
        scale_settings.addRow("–ê–º–ø–ª–∏—Ç—É–¥–∞:", self.scale_amplitude)
        
        self.zoom_burst_start = SliderWithLabel(100, 200, 150)
        scale_settings.addRow("–ù–∞—á–∞–ª—å–Ω—ã–π –∑—É–º:", self.zoom_burst_start)
        
        self.zoom_burst_decay = SliderWithLabel(0, 100, 80)
        scale_settings.addRow("–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è:", self.zoom_burst_decay)
        
        scale_layout.addLayout(scale_settings)
        scale_group.setLayout(scale_layout)
        scroll_layout.addWidget(scale_group)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∏ —Ç—Ä—è—Å–∫–∞
        motion_group = CollapsibleGroupBox("üéØ –î–≤–∏–∂–µ–Ω–∏–µ –∏ —Ç—Ä—è—Å–∫–∞")
        motion_layout = QVBoxLayout()
        
        motion_grid = QGridLayout()
        
        motion_effects = [
            ("shake", "Shake", "–¢—Ä—è—Å–∫–∞ –∫–∞–º–µ—Ä—ã"),
            ("wobble", "Wobble", "–ü–æ–∫–∞—á–∏–≤–∞–Ω–∏–µ"),
            ("pendulum", "Pendulum", "–ú–∞—è—Ç–Ω–∏–∫"),
            ("swing", "Swing", "–†–∞—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"),
            ("spin", "Spin", "–í—Ä–∞—â–µ–Ω–∏–µ"),
            ("flip", "Flip", "–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç")
        ]
        
        self.motion_effects = {}
        for i, (effect_id, label, desc) in enumerate(motion_effects):
            widget = EffectCheckBox(effect_id, label, desc)
            self.motion_effects[effect_id] = widget
            motion_grid.addWidget(widget, i // 2, i % 2)
        
        motion_layout.addLayout(motion_grid)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        motion_settings = QFormLayout()
        
        self.motion_intensity = SliderWithLabel(0, 100, 30)
        motion_settings.addRow("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:", self.motion_intensity)
        
        motion_layout.addLayout(motion_settings)
        motion_group.setLayout(motion_layout)
        scroll_layout.addWidget(motion_group)
        
        # –¶–∏—Ñ—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        digital_group = CollapsibleGroupBox("üí´ –¶–∏—Ñ—Ä–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        digital_layout = QVBoxLayout()
        
        digital_grid = QGridLayout()
        
        digital_effects = [
            ("glitch", "Glitch", "–¶–∏—Ñ—Ä–æ–≤–æ–π —Å–±–æ–π"),
            ("chromatic", "Chromatic", "–•—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–±–µ—Ä—Ä–∞—Ü–∏—è"),
            ("rgbSplit", "RGB Split", "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ RGB"),
            ("distortion", "Distortion", "–ò—Å–∫–∞–∂–µ–Ω–∏–µ"),
            ("zoomBlur", "Zoom Blur", "–†–∞–¥–∏–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ"),
            ("pixelate", "Pixelate", "–ü–∏–∫—Å–µ–ª–∏–∑–∞—Ü–∏—è")
        ]
        
        self.digital_effects = {}
        for i, (effect_id, label, desc) in enumerate(digital_effects):
            widget = EffectCheckBox(effect_id, label, desc)
            self.digital_effects[effect_id] = widget
            digital_grid.addWidget(widget, i // 2, i % 2)
        
        digital_layout.addLayout(digital_grid)
        digital_group.setLayout(digital_layout)
        scroll_layout.addWidget(digital_group)
        
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        frequency_group = CollapsibleGroupBox("üìä –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        frequency_layout = QFormLayout()
        
        self.effect_frequency = QComboBox()
        self.effect_frequency.addItems([
            ("all", "–ö–æ –≤—Å–µ–º –∫–ª–∏–ø–∞–º"),
            ("percent", "–ö –ø—Ä–æ—Ü–µ–Ω—Ç—É –∫–ª–∏–ø–æ–≤"),
            ("every", "–ö –∫–∞–∂–¥–æ–º—É N-–º—É –∫–ª–∏–ø—É"),
            ("random", "–°–ª—É—á–∞–π–Ω–æ")
        ])
        self.effect_frequency.currentIndexChanged.connect(self._on_frequency_changed)
        frequency_layout.addRow("–ü—Ä–∏–º–µ–Ω—è—Ç—å:", self.effect_frequency)
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç
        self.percent_widget = QWidget()
        percent_layout = QHBoxLayout()
        percent_layout.setContentsMargins(0, 0, 0, 0)
        self.effect_percent = SliderWithLabel(0, 100, 50)
        percent_layout.addWidget(QLabel("–ü—Ä–æ—Ü–µ–Ω—Ç –∫–ª–∏–ø–æ–≤:"))
        percent_layout.addWidget(self.effect_percent)
        self.percent_widget.setLayout(percent_layout)
        self.percent_widget.setVisible(False)
        frequency_layout.addRow(self.percent_widget)
        
        # –ö–∞–∂–¥—ã–π N
        self.every_widget = QWidget()
        every_layout = QHBoxLayout()
        every_layout.setContentsMargins(0, 0, 0, 0)
        every_layout.addWidget(QLabel("–ö–∞–∂–¥—ã–π:"))
        self.effect_every = QSpinBox()
        self.effect_every.setRange(2, 10)
        self.effect_every.setValue(3)
        every_layout.addWidget(self.effect_every)
        every_layout.addWidget(QLabel("–∫–ª–∏–ø"))
        every_layout.addStretch()
        self.every_widget.setLayout(every_layout)
        self.every_widget.setVisible(False)
        frequency_layout.addRow(self.every_widget)
        
        # –¢–∞–π–º–∏–Ω–≥
        self.capcut_timing = QComboBox()
        self.capcut_timing.addItems([
            ("start", "–í –Ω–∞—á–∞–ª–µ –∫–ª–∏–ø–∞"),
            ("middle", "–í —Å–µ—Ä–µ–¥–∏–Ω–µ –∫–ª–∏–ø–∞"),
            ("end", "–í –∫–æ–Ω—Ü–µ –∫–ª–∏–ø–∞"),
            ("random", "–°–ª—É—á–∞–π–Ω–æ")
        ])
        frequency_layout.addRow("–ú–æ–º–µ–Ω—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:", self.capcut_timing)
        
        self.avoid_repetition = QCheckBox("–ò–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø–æ–¥—Ä—è–¥")
        self.avoid_repetition.setChecked(True)
        frequency_layout.addRow(self.avoid_repetition)
        
        frequency_group.setLayout(frequency_layout)
        scroll_layout.addWidget(frequency_group)
        
        # –ü—Ä–µ—Å–µ—Ç—ã
        presets_layout = QHBoxLayout()
        presets_layout.addWidget(QLabel("–ü—Ä–µ—Å–µ—Ç—ã:"))
        
        presets = [
            ("dynamic", "üé¨ –î–∏–Ω–∞–º–∏—á–Ω—ã–π"),
            ("smooth", "üåä –ü–ª–∞–≤–Ω—ã–π"),
            ("epic", "‚ö° –≠–ø–∏—á–Ω—ã–π"),
            ("minimal", "‚ö™ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π")
        ]
        
        for preset_id, label in presets:
            btn = QPushButton(label)
            btn.clicked.connect(lambda checked, p=preset_id: self._apply_preset(p))
            presets_layout.addWidget(btn)
        
        presets_layout.addStretch()
        scroll_layout.addLayout(presets_layout)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CapCut —ç—Ñ—Ñ–µ–∫—Ç—ã")
        save_btn.setObjectName("primaryButton")
        save_btn.clicked.connect(self._save_effects)
        scroll_layout.addWidget(save_btn)
        
        scroll_layout.addStretch()
        scroll_widget.setLayout(scroll_layout)
        scroll.setWidget(scroll_widget)
        
        layout.addWidget(scroll)
        self.setLayout(layout)
    
    def set_channels(self, channels: List[Channel]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        self.channels = channels
        self._update_channel_combo()
    
    def _update_channel_combo(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        current = self.channel_combo.currentText()
        self.channel_combo.clear()
        self.channel_combo.addItems([ch.name for ch in self.channels])
        
        if current in [ch.name for ch in self.channels]:
            self.channel_combo.setCurrentText(current)
    
    def _on_frequency_changed(self, index: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã"""
        frequency = self.effect_frequency.currentData()
        self.percent_widget.setVisible(frequency == "percent")
        self.every_widget.setVisible(frequency == "every")
    
    def _load_channel_effects(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–Ω–∞–ª–∞"""
        channel_name = self.channel_combo.currentText()
        if not channel_name:
            return
        
        self.current_channel = next((ch for ch in self.channels if ch.name == channel_name), None)
        if not self.current_channel:
            return
        
        effects = self.current_channel.effects
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        for effect_id, widget in self.scale_effects.items():
            widget.setChecked(effect_id in effects.capcut_effects)
        
        for effect_id, widget in self.motion_effects.items():
            widget.setChecked(effect_id in effects.motion_effects)
        
        for effect_id, widget in self.digital_effects.items():
            widget.setChecked(
                effect_id in effects.capcut_effects or 
                effect_id in effects.motion_effects
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.scale_amplitude.setValue(effects.scale_amplitude)
        self.zoom_burst_start.setValue(effects.zoom_burst_start)
        self.zoom_burst_decay.setValue(effects.zoom_burst_decay)
        if hasattr(self, "motion_intensity"):
            self.motion_intensity.setValue(effects.motion_intensity)
        
        # –ß–∞—Å—Ç–æ—Ç–∞
        for i in range(self.effect_frequency.count()):
            if self.effect_frequency.itemData(i) == effects.effect_frequency:
                self.effect_frequency.setCurrentIndex(i)
                break
        
        self.effect_percent.setValue(effects.effect_percent)
        self.effect_every.setValue(effects.effect_every)
        
        for i in range(self.capcut_timing.count()):
            if self.capcut_timing.itemData(i) == effects.capcut_timing:
                self.capcut_timing.setCurrentIndex(i)
                break
        
        self.avoid_repetition.setChecked(effects.avoid_repetition)
    
    def _copy_effects(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")

    def _reset_effects(self):
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        print("–°–±—Ä–æ—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")

    def _save_effects(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã"""
        if not self.current_channel:
            self.show_warning("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª")
            return
        
        effects = self.current_channel.effects
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        capcut_effects = []
        motion_effects = []
        
        for effect_id, widget in self.scale_effects.items():
            if widget.isChecked():
                capcut_effects.append(effect_id)
        
        for effect_id, widget in self.motion_effects.items():
            if widget.isChecked():
                motion_effects.append(effect_id)
        
        for effect_id, widget in self.digital_effects.items():
            if widget.isChecked() and effect_id not in capcut_effects:
                capcut_effects.append(effect_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        effects.capcut_effects = capcut_effects
        effects.motion_effects = motion_effects
        effects.scale_amplitude = self.scale_amplitude.value()
        effects.zoom_burst_start = self.zoom_burst_start.value()
        effects.zoom_burst_decay = self.zoom_burst_decay.value()
        if hasattr(self, "motion_intensity"):
            effects.motion_intensity = self.motion_intensity.value()
        else:
            effects.motion_intensity = 30
        effects.effect_frequency = self.effect_frequency.currentData()
        effects.effect_percent = self.effect_percent.value()
        effects.effect_every = self.effect_every.value()
        effects.capcut_timing = self.capcut_timing.currentData()
        effects.avoid_repetition = self.avoid_repetition.isChecked()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        effects.validate()
        
        self.show_info(f"CapCut —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{self.current_channel.name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")